from string import StringBuilder

class FifoError(Error):
    message: string

@generic(T)
class Fifo:
    """A fixed size fifo.

    """

    _read_index: u64
    _read_length: u64
    _items: [T]

    func __init__(self, capacity: u64):
        self._read_index = 0
        self._read_length = 0
        self._items = []

        for _ in range(i64(capacity)):
            self._items.append(default(T))

    func __len__(self) -> u64:
        """Returns the number of items in the fifo.

        """

        return self._read_length

    func is_full(self) -> bool:
        """Returns True if the fifo is full, False otherwise.

        """

        return self._read_length == len(self._items)

    func is_empty(self) -> bool:
        """Returns True if the fifo is empty, False otherwise.

        """

        return self._read_length == 0

    func push(self, item: T):
        """Push an item on the fifo.

        """

        if self.is_full():
            raise FifoError("cannot push to full fifo")

        write_index = (self._read_index + self._read_length) % len(self._items)
        self._items[write_index] = item
        self._read_length += 1

    func pop(self) -> T:
        """Pop an item from the fifo.

        """

        if self.is_empty():
            raise FifoError("cannot pop from empty fifo")

        item = self._items[self._read_index]
        self._read_index += 1
        self._read_index %= len(self._items)
        self._read_length -= 1

        return item

    func __str__(self) -> string:
        builder = StringBuilder()
        builder += "Fifo(items=["

        for offset in range(i64(self._read_length)):
            index = self._read_index + u64(offset)
            index %= len(self._items)

            if offset != 0:
                builder += ", "

            builder += str(self._items[index])

        builder += "])"

        return builder.to_string()

test fifo():
    fifo = Fifo[string](10)
    assert len(fifo) == 0
    assert fifo.is_empty()
    assert not fifo.is_full()

    try:
        message = ""
        fifo.pop()
    except FifoError as error:
        message = error.message

    assert message == "cannot pop from empty fifo"

    fifo.push("foo")
    assert fifo.pop() == "foo"

    try:
        message = ""
        fifo.pop()
    except FifoError as error:
        message = error.message

    assert message == "cannot pop from empty fifo"

    for i in range(10):
        assert not fifo.is_full()
        fifo.push(str(i))
        assert len(fifo) == u64(i + 1)
        assert not fifo.is_empty()

    try:
        message = ""
        fifo.push("11")
    except FifoError as error:
        message = error.message

    assert message == "cannot push to full fifo"

    assert len(fifo) == 10
    assert fifo.is_full()
    assert not fifo.is_empty()

    for i in range(10):
        assert fifo.pop() == str(i)
        assert len(fifo) == u64(9 - i)

test str():
    fifo = Fifo[string](10)
    assert str(fifo) == "Fifo(items=[])"

    fifo.push("1")
    fifo.push(None)
    fifo.push("2")
    assert str(fifo) == "Fifo(items=[\"1\", None, \"2\"])"

    fifo.pop()
    fifo.pop()
    assert str(fifo) == "Fifo(items=[\"2\"])"

test capacity_zero():
    fifo = Fifo[bytes](0)
    assert fifo.is_empty()
    assert fifo.is_full()

test i32():
    fifo = Fifo[i32](1)
    fifo.push(5)
    assert fifo.pop() == 5
